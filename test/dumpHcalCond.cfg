## example cfg to dump HCAL conditions from the database
## (can be also used to dump sqlite content or to test fake conditions reading in CMSSW)
## Radek Ofierzynski, 20.03.2008

process DUMP = {
    path p = { prod  }

## specify which conditions you would like to dump to a text file in the "dump" vstring
    module prod = HcalDumpConditions{
    	   untracked string outFilePrefix = "DumpCond"
	   untracked vstring dump = {
	   	     "Pedestals"
		     ,"PedestalWidths"
		     ,"Gains"
		     ,"QIEData"
	   	     ,"ElectronicsMap"
#		     ,"ChannelQuality", "GainWidths"
	   }
    }

## specify for which run you would like to get the conditions in the "firstRun"
    source = EmptySource {
	untracked uint32 firstRun = 1
	untracked uint32 numberEventsInRun = 1
    }        
    
#    include "CalibCalorimetry/Configuration/data/Hcal_FakeConditions.cff"
#    include "CalibCalorimetry/Configuration/data/Hcal_FrontierConditions_DevDB.cff"

    include "CondCore/DBCommon/data/CondDBSetup.cfi"

## specify which conditions should be taken for input, 
## you can mix different es_sources as long as it's unique for each object
    es_source es_pool = PoolDBESSource { 
      using CondDBSetup
      string connect = "frontier://Frontier/CMS_COND_ON_18X_HCAL"
      string timetype = "runnumber"    
      untracked uint32 authenticationMethod = 0
           VPSet toGet = {
                    {string record = "HcalPedestalsRcd"
                     string tag    = "hcal_pedestals_fC_v2_grmm"
                    }
                    ,{string record = "HcalPedestalWidthsRcd"
                     string tag =    "hcal_widths_fC_v2_grmm"
                    }
                    ,{string record = "HcalGainsRcd"
                     string tag =    "hcal_gains_v2_gren_reprocessing"
                    }
                    ,{string record = "HcalQIEDataRcd"
                     string tag =    "qie_normalmode_v3"
                    }
                    ,{string record = "HcalElectronicsMapRcd"
                     string tag =    "official_emap_v5_080208"
                    }
                  }
    }
    es_source es_hardcode = HcalHardcodeCalibrations {
    	      untracked vstring toGet = {
	            "GainWidths", "channelQuality"
              } }
#    es_source es_ascii = HcalTextCalibrations { VPSet input = {
#          {string object = "Pedestals"
#           FileInPath file = "CondFormats/HcalObjects/data/hcal_pedestals_fC_v1_zdc.txt"
#          }
#          ,{string object = "PedestalWidths"
#           FileInPath file = "CondFormats/HcalObjects/data/hcal_widths_fC_v1_zdc.txt"
#          }
#          ,{string object = "Gains"
#           FileInPath file = "CondFormats/HcalObjects/data/hcal_gains_v1_zdc.txt"
#          }
#          ,{string object = "GainWidths"
#           FileInPath file = "CondFormats/HcalObjects/data/hcal_gains_widths_v1.txt"
#          }
#          ,{string object = "QIEData"
#           FileInPath file = "CondFormats/HcalObjects/data/qie_normalmode_v3_zdc.txt"
#          }
#          ,{string object = "ElectronicsMap"
#           FileInPath file = "CondFormats/HcalObjects/data/official_emap_v5_080208.txt"
#          }
#          ,{string object = "ChannelQuality"
#           FileInPath file = "CondFormats/HcalObjects/data/hcal_quality_v1.txt"
#          }
#       }
#    }

    untracked PSet maxEvents = {untracked int32 input = 1 }   
}

